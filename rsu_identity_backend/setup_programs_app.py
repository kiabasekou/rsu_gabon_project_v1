#!/usr/bin/env python
"""
üá¨üá¶ RSU Gabon - Script Installation Programs App
Standards Top 1% - Installation Automatique
Fichier: rsu_identity_backend/setup_programs_app.py
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'rsu_identity.settings.development')
django.setup()

from django.core.management import call_command
from apps.programs_app.models import ProgramCategory, SocialProgram
from apps.core_app.models import RSUUser
from decimal import Decimal
from datetime import date, timedelta


def print_step(step, message):
    """Affiche √©tape avec style"""
    print(f"\n{'='*60}")
    print(f"üìã √âTAPE {step}: {message}")
    print(f"{'='*60}\n")


def create_sample_data():
    """Cr√©e donn√©es d'exemple"""
    print_step(1, "CR√âATION DONN√âES D'EXEMPLE")
    
    # V√©rifier si donn√©es existent d√©j√†
    if ProgramCategory.objects.exists():
        print("‚ö†Ô∏è  Des cat√©gories existent d√©j√†.")
        response = input("Supprimer et recr√©er ? (y/N): ")
        if response.lower() == 'y':
            ProgramCategory.objects.all().delete()
            SocialProgram.objects.all().delete()
            print("‚úÖ Donn√©es supprim√©es")
        else:
            print("‚ùå Installation annul√©e")
            return False
    
    # R√©cup√©rer admin user
    admin_user = RSUUser.objects.filter(is_superuser=True).first()
    if not admin_user:
        print("‚ùå Erreur: Aucun superuser trouv√©")
        print("   Cr√©ez un superuser avec: python manage.py createsuperuser")
        return False
    
    print(f"‚úÖ Admin user: {admin_user.username}")
    
    # Cr√©er cat√©gories
    print("\nüìÅ Cr√©ation cat√©gories...")
    categories = [
        {
            "name": "Transferts Mon√©taires",
            "description": "Programmes de transferts directs aux m√©nages vuln√©rables",
            "icon": "üí∞"
        },
        {
            "name": "√âducation",
            "description": "Bourses scolaires et aide √† la scolarisation",
            "icon": "üéì"
        },
        {
            "name": "Sant√©",
            "description": "Assurance maladie et acc√®s aux soins",
            "icon": "üè•"
        },
        {
            "name": "Alimentation",
            "description": "Aide alimentaire et nutrition",
            "icon": "üçé"
        },
        {
            "name": "Logement",
            "description": "Aide au logement et r√©habilitation",
            "icon": "üè†"
        }
    ]
    
    created_categories = {}
    for cat_data in categories:
        cat = ProgramCategory.objects.create(**cat_data)
        created_categories[cat.name] = cat
        print(f"   ‚úÖ {cat.icon} {cat.name}")
    
    # Cr√©er programmes
    print("\nüìã Cr√©ation programmes...")
    today = date.today()
    programs = [
        {
            "code": "TMC-2025",
            "name": "Transfert Mon√©taire Conditionnel 2025",
            "category": created_categories["Transferts Mon√©taires"],
            "description": "Programme de soutien financier direct aux familles les plus vuln√©rables du Gabon",
            "objectives": "R√©duire la pauvret√© extr√™me et am√©liorer les conditions de vie des m√©nages",
            "status": "ACTIVE",
            "start_date": today,
            "end_date": today + timedelta(days=365),
            "total_budget": Decimal("1000000000"),  # 1 milliard FCFA
            "benefit_amount": Decimal("50000"),  # 50,000 FCFA/mois
            "frequency": "MONTHLY",
            "max_beneficiaries": 1000,
            "eligibility_criteria": {
                "vulnerability_min": 50,
                "age_min": 18,
                "provinces": ["ESTUAIRE", "HAUT_OGOOUE", "NGOUNIE"]
            },
            "target_provinces": ["ESTUAIRE", "HAUT_OGOOUE", "NGOUNIE"]
        },
        {
            "code": "BOURSE-EDU-2025",
            "name": "Bourses Scolaires 2025",
            "category": created_categories["√âducation"],
            "description": "Bourses pour enfants issus de familles d√©favoris√©es",
            "objectives": "Favoriser l'acc√®s √† l'√©ducation pour tous",
            "status": "ACTIVE",
            "start_date": today,
            "end_date": date(2025, 6, 30),
            "total_budget": Decimal("500000000"),
            "benefit_amount": Decimal("75000"),
            "frequency": "QUARTERLY",
            "max_beneficiaries": 500,
            "eligibility_criteria": {
                "vulnerability_min": 40,
                "age_min": 6,
                "age_max": 18
            },
            "target_provinces": ["ESTUAIRE", "HAUT_OGOOUE", "MOYEN_OGOOUE"]
        },
        {
            "code": "AMU-2025",
            "name": "Assurance Maladie Universelle",
            "category": created_categories["Sant√©"],
            "description": "Couverture sant√© universelle pour les plus vuln√©rables",
            "objectives": "Garantir l'acc√®s aux soins de sant√© pour tous",
            "status": "ACTIVE",
            "start_date": today,
            "total_budget": Decimal("2000000000"),
            "benefit_amount": Decimal("25000"),
            "frequency": "MONTHLY",
            "max_beneficiaries": 5000,
            "eligibility_criteria": {
                "vulnerability_min": 60
            },
            "target_provinces": []  # Toutes provinces
        },
        {
            "code": "AIDE-ALIM-2025",
            "name": "Aide Alimentaire d'Urgence",
            "category": created_categories["Alimentation"],
            "description": "Distribution de kits alimentaires aux familles en situation critique",
            "objectives": "Assurer s√©curit√© alimentaire des populations vuln√©rables",
            "status": "DRAFT",
            "start_date": today + timedelta(days=30),
            "total_budget": Decimal("300000000"),
            "benefit_amount": Decimal("30000"),
            "frequency": "ONE_TIME",
            "max_beneficiaries": 2000,
            "eligibility_criteria": {
                "vulnerability_min": 75
            },
            "target_provinces": ["NGOUNIE", "NYANGA", "OGOOUE_LOLO"]
        },
        {
            "code": "REHAB-LOG-2025",
            "name": "Programme R√©habilitation Logement",
            "category": created_categories["Logement"],
            "description": "Aide √† la r√©novation de logements insalubres",
            "objectives": "Am√©liorer conditions d'habitat des familles vuln√©rables",
            "status": "DRAFT",
            "start_date": today + timedelta(days=60),
            "total_budget": Decimal("800000000"),
            "benefit_amount": Decimal("500000"),
            "frequency": "ONE_TIME",
            "max_beneficiaries": 300,
            "eligibility_criteria": {
                "vulnerability_min": 65,
                "household_size_min": 3
            },
            "target_provinces": ["ESTUAIRE", "OGOOUE_MARITIME"]
        }
    ]
    
    created_programs = []
    for prog_data in programs:
        prog = SocialProgram.objects.create(
            **prog_data,
            managed_by=admin_user,
            created_by=admin_user
        )
        created_programs.append(prog)
        
        status_icon = "üü¢" if prog.status == "ACTIVE" else "üü°"
        print(f"   {status_icon} {prog.code} - {prog.name}")
        print(f"      Budget: {prog.total_budget:,.0f} FCFA")
        print(f"      Aide: {prog.benefit_amount:,.0f} FCFA/{prog.get_frequency_display()}")
    
    return True


def run_tests():
    """Ex√©cute tests basiques"""
    print_step(2, "TESTS APIs")
    
    print("üß™ Test 1: Compter programmes...")
    count = SocialProgram.objects.count()
    print(f"   ‚úÖ {count} programmes trouv√©s")
    
    print("\nüß™ Test 2: Programmes actifs...")
    active = SocialProgram.objects.filter(status='ACTIVE').count()
    print(f"   ‚úÖ {active} programmes actifs")
    
    print("\nüß™ Test 3: Budget total...")
    total_budget = sum(
        p.total_budget for p in SocialProgram.objects.all()
    )
    print(f"   ‚úÖ Budget total: {total_budget:,.0f} FCFA")
    
    print("\nüß™ Test 4: Cat√©gories...")
    categories = ProgramCategory.objects.count()
    print(f"   ‚úÖ {categories} cat√©gories")


def display_summary():
    """Affiche r√©sum√©"""
    print_step(3, "R√âSUM√â INSTALLATION")
    
    programs = SocialProgram.objects.all()
    categories = ProgramCategory.objects.all()
    
    print("üìä STATISTIQUES:")
    print(f"   ‚Ä¢ {categories.count()} cat√©gories cr√©√©es")
    print(f"   ‚Ä¢ {programs.count()} programmes cr√©√©s")
    print(f"   ‚Ä¢ {programs.filter(status='ACTIVE').count()} programmes actifs")
    print(f"   ‚Ä¢ Budget total: {sum(p.total_budget for p in programs):,.0f} FCFA")
    
    print("\nüìã PROGRAMMES PAR CAT√âGORIE:")
    for cat in categories:
        count = cat.programs.count()
        print(f"   {cat.icon} {cat.name}: {count} programme(s)")
    
    print("\nüéØ ENDPOINTS DISPONIBLES:")
    print("   GET  /api/v1/programs/programs/")
    print("   POST /api/v1/programs/programs/")
    print("   GET  /api/v1/programs/categories/")
    print("   GET  /api/v1/programs/enrollments/")
    print("   GET  /api/v1/programs/payments/")
    
    print("\nüîó ADMIN DJANGO:")
    print("   http://localhost:8000/admin/programs_app/")
    
    print("\n‚úÖ INSTALLATION TERMIN√âE AVEC SUCC√àS!")


def main():
    """Fonction principale"""
    print("\n" + "="*60)
    print("üá¨üá¶ RSU GABON - INSTALLATION PROGRAMS APP")
    print("="*60)
    
    try:
        # Cr√©er donn√©es
        if not create_sample_data():
            print("\n‚ùå Installation annul√©e")
            return
        
        # Tests
        run_tests()
        
        # R√©sum√©
        display_summary()
        
    except Exception as e:
        print(f"\n‚ùå ERREUR: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()