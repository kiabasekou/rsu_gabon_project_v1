# Generated by Django 5.0.8 on 2025-10-09 17:07

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("identity_app", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="GeographicInterventionCost",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Modifié le"),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Actif")),
                (
                    "zone_key",
                    models.CharField(
                        choices=[
                            ("ZONE_1", "Zone Critique"),
                            ("ZONE_2", "Zone Priorité Élevée"),
                            ("ZONE_3", "Zone Priorité Modérée"),
                            ("ZONE_4", "Zone Standard"),
                        ],
                        max_length=20,
                        unique=True,
                        verbose_name="Zone géographique",
                    ),
                ),
                (
                    "cost_per_person",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Coût par personne (FCFA)",
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "last_updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Dernière modification"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_%(class)s_set",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Créé par",
                    ),
                ),
                (
                    "last_updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Dernière modification par",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="updated_%(class)s_set",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Modifié par",
                    ),
                ),
            ],
            options={
                "verbose_name": "Coût d'intervention géographique",
                "verbose_name_plural": "Coûts d'intervention géographiques",
                "db_table": "services_intervention_costs",
                "ordering": ["zone_key"],
            },
        ),
        migrations.CreateModel(
            name="SocialProgram",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Modifié le"),
                ),
                (
                    "code",
                    models.CharField(
                        help_text="Code unique (ex: AIDE_ALIMENTAIRE)",
                        max_length=20,
                        unique=True,
                        verbose_name="Code programme",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=100, verbose_name="Nom du programme"),
                ),
                ("description", models.TextField(verbose_name="Description détaillée")),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Programme actif"),
                ),
                (
                    "annual_budget",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=15,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Budget annuel (FCFA)",
                    ),
                ),
                (
                    "budget_used_fcfa",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=15,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Budget utilisé (FCFA)",
                    ),
                ),
                (
                    "benefit_amount_fcfa",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Montant par bénéficiaire (FCFA)",
                    ),
                ),
                (
                    "duration_months",
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(60),
                        ],
                        verbose_name="Durée standard (mois)",
                    ),
                ),
                (
                    "max_beneficiaries",
                    models.PositiveIntegerField(
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="Nombre max bénéficiaires",
                    ),
                ),
                (
                    "current_beneficiaries",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Bénéficiaires actuels"
                    ),
                ),
                (
                    "eligibility_criteria",
                    models.JSONField(
                        default=dict,
                        help_text="Configuration JSON des critères",
                        verbose_name="Critères d'éligibilité",
                    ),
                ),
                (
                    "target_provinces",
                    models.JSONField(default=list, verbose_name="Provinces ciblées"),
                ),
                (
                    "urban_rural_preference",
                    models.CharField(
                        choices=[
                            ("URBAN", "Zones urbaines"),
                            ("RURAL", "Zones rurales"),
                            ("BOTH", "Urbain et rural"),
                        ],
                        default="BOTH",
                        max_length=10,
                        verbose_name="Préférence géographique",
                    ),
                ),
                (
                    "program_type",
                    models.CharField(
                        choices=[
                            ("CASH_TRANSFER", "Transfert monétaire"),
                            ("FOOD_AID", "Aide alimentaire"),
                            ("HEALTHCARE", "Santé"),
                            ("EDUCATION", "Éducation"),
                            ("HOUSING", "Logement"),
                            ("TRAINING", "Formation"),
                            ("MICROCREDIT", "Micro-crédit"),
                        ],
                        max_length=20,
                        verbose_name="Type de programme",
                    ),
                ),
                (
                    "automated_enrollment",
                    models.BooleanField(
                        default=False, verbose_name="Inscription automatique"
                    ),
                ),
                (
                    "requires_documents",
                    models.BooleanField(
                        default=True, verbose_name="Nécessite documents"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_%(class)s_set",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Créé par",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="updated_%(class)s_set",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Modifié par",
                    ),
                ),
            ],
            options={
                "verbose_name": "Programme Social",
                "verbose_name_plural": "Programmes Sociaux",
                "db_table": "services_social_programs",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="ProgramBudgetChange",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Modifié le"),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Actif")),
                (
                    "change_type",
                    models.CharField(
                        choices=[
                            ("INCREASE", "Augmentation budget"),
                            ("DECREASE", "Réduction budget"),
                            ("REALLOCATION", "Réaffectation budgétaire"),
                            ("ADJUSTMENT", "Ajustement technique"),
                            ("POLICY_CHANGE", "Changement politique"),
                        ],
                        max_length=20,
                        verbose_name="Type de changement",
                    ),
                ),
                (
                    "previous_budget_total",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=15,
                        verbose_name="Ancien budget total",
                    ),
                ),
                (
                    "new_budget_total",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=15,
                        verbose_name="Nouveau budget total",
                    ),
                ),
                (
                    "amount_change_fcfa",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=15,
                        verbose_name="Montant du changement (FCFA)",
                    ),
                ),
                (
                    "justification",
                    models.TextField(verbose_name="Justification détaillée"),
                ),
                (
                    "budget_source",
                    models.CharField(max_length=50, verbose_name="Source budgétaire"),
                ),
                (
                    "approval_date",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        verbose_name="Date d'approbation",
                    ),
                ),
                (
                    "approved_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Approuvé par",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_%(class)s_set",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Créé par",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="updated_%(class)s_set",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Modifié par",
                    ),
                ),
                (
                    "program",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="budget_changes",
                        to="services_app.socialprogram",
                        verbose_name="Programme",
                    ),
                ),
            ],
            options={
                "verbose_name": "Modification Budget Programme",
                "verbose_name_plural": "Modifications Budgets Programmes",
                "db_table": "services_program_budget_changes",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="SocialProgramEligibility",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Modifié le"),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Actif")),
                (
                    "program_code",
                    models.CharField(max_length=20, verbose_name="Code programme"),
                ),
                (
                    "eligibility_score",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=5,
                        verbose_name="Score éligibilité (0-100)",
                    ),
                ),
                (
                    "recommendation_level",
                    models.CharField(
                        choices=[
                            ("HIGHLY_RECOMMENDED", "Fortement recommandé"),
                            ("RECOMMENDED", "Recommandé"),
                            ("CONDITIONALLY_ELIGIBLE", "Éligible sous conditions"),
                            ("NOT_ELIGIBLE", "Non éligible"),
                        ],
                        max_length=30,
                        verbose_name="Niveau recommandation",
                    ),
                ),
                (
                    "processing_priority",
                    models.CharField(
                        choices=[
                            ("URGENT", "Urgent"),
                            ("HIGH", "Priorité haute"),
                            ("MEDIUM", "Priorité moyenne"),
                            ("LOW", "Priorité basse"),
                        ],
                        default="MEDIUM",
                        max_length=10,
                        verbose_name="Priorité traitement",
                    ),
                ),
                (
                    "eligibility_factors",
                    models.JSONField(
                        default=list, verbose_name="Facteurs d'éligibilité"
                    ),
                ),
                (
                    "blocking_factors",
                    models.JSONField(default=list, verbose_name="Facteurs bloquants"),
                ),
                (
                    "estimated_monthly_benefit",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="Bénéfice mensuel estimé (FCFA)",
                    ),
                ),
                (
                    "estimated_impact",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("HIGH", "Impact élevé"),
                            ("MEDIUM", "Impact moyen"),
                            ("LOW", "Impact faible"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Impact estimé",
                    ),
                ),
                (
                    "intervention_urgency",
                    models.CharField(
                        choices=[
                            ("IMMEDIATE", "Immédiat"),
                            ("WITHIN_WEEK", "Dans la semaine"),
                            ("WITHIN_MONTH", "Dans le mois"),
                            ("ROUTINE", "Routine"),
                        ],
                        default="ROUTINE",
                        max_length=15,
                        verbose_name="Urgence intervention",
                    ),
                ),
                (
                    "assessment_date",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date évaluation"
                    ),
                ),
                (
                    "assessment_notes",
                    models.TextField(blank=True, verbose_name="Notes d'évaluation"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_%(class)s_set",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Créé par",
                    ),
                ),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="program_eligibilities",
                        to="identity_app.personidentity",
                        verbose_name="Personne",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="updated_%(class)s_set",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Modifié par",
                    ),
                ),
            ],
            options={
                "verbose_name": "Éligibilité Programme",
                "verbose_name_plural": "Éligibilités Programmes",
                "db_table": "services_program_eligibility",
                "ordering": ["-assessment_date"],
            },
        ),
        migrations.CreateModel(
            name="VulnerabilityAssessment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Modifié le"),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Actif")),
                (
                    "vulnerability_score",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=5,
                        verbose_name="Score vulnérabilité global (0-100)",
                    ),
                ),
                (
                    "risk_level",
                    models.CharField(
                        choices=[
                            ("CRITICAL", "Critique"),
                            ("HIGH", "Élevée"),
                            ("MODERATE", "Modérée"),
                            ("LOW", "Faible"),
                        ],
                        max_length=20,
                        verbose_name="Niveau de risque",
                    ),
                ),
                (
                    "household_composition_score",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=5,
                        verbose_name="Score composition ménage",
                    ),
                ),
                (
                    "economic_vulnerability_score",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=5,
                        verbose_name="Score vulnérabilité économique",
                    ),
                ),
                (
                    "social_vulnerability_score",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=5,
                        verbose_name="Score vulnérabilité sociale",
                    ),
                ),
                (
                    "vulnerability_factors",
                    models.JSONField(
                        default=list, verbose_name="Facteurs de vulnérabilité"
                    ),
                ),
                (
                    "risk_factors",
                    models.JSONField(default=list, verbose_name="Facteurs de risque"),
                ),
                (
                    "protective_factors",
                    models.JSONField(default=list, verbose_name="Facteurs protecteurs"),
                ),
                (
                    "recommendations",
                    models.JSONField(default=list, verbose_name="Recommandations"),
                ),
                (
                    "priority_interventions",
                    models.JSONField(
                        default=list, verbose_name="Interventions prioritaires"
                    ),
                ),
                (
                    "assessment_date",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date évaluation"
                    ),
                ),
                (
                    "assessment_notes",
                    models.TextField(blank=True, verbose_name="Notes d'évaluation"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_%(class)s_set",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Créé par",
                    ),
                ),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="vulnerability_assessments",
                        to="identity_app.personidentity",
                        verbose_name="Personne",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="updated_%(class)s_set",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Modifié par",
                    ),
                ),
            ],
            options={
                "verbose_name": "Évaluation vulnérabilité",
                "verbose_name_plural": "Évaluations vulnérabilité",
                "db_table": "services_vulnerability_assessments",
                "ordering": ["-assessment_date"],
            },
        ),
        migrations.AddConstraint(
            model_name="socialprogrameligibility",
            constraint=models.UniqueConstraint(
                fields=("person", "program_code"),
                name="unique_person_program_eligibility",
            ),
        ),
    ]
