# Generated by Django 5.0.8 on 2025-10-09 17:07

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("identity_app", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ProgramCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=100, unique=True, verbose_name="Nom catégorie"
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "icon",
                    models.CharField(
                        blank=True,
                        help_text="Icône/emoji représentant la catégorie",
                        max_length=50,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Catégorie de Programme",
                "verbose_name_plural": "Catégories de Programmes",
                "db_table": "program_categories",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="SocialProgram",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        help_text="Ex: TMC-2025, ALLOC-FAM",
                        max_length=20,
                        unique=True,
                        verbose_name="Code programme",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=200, verbose_name="Nom du programme"),
                ),
                ("description", models.TextField(verbose_name="Description détaillée")),
                (
                    "objectives",
                    models.TextField(blank=True, verbose_name="Objectifs du programme"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Brouillon"),
                            ("ACTIVE", "Actif"),
                            ("PAUSED", "Suspendu"),
                            ("CLOSED", "Clôturé"),
                        ],
                        default="DRAFT",
                        max_length=20,
                        verbose_name="Statut",
                    ),
                ),
                ("start_date", models.DateField(verbose_name="Date de début")),
                (
                    "end_date",
                    models.DateField(blank=True, null=True, verbose_name="Date de fin"),
                ),
                (
                    "total_budget",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=15,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Budget total (FCFA)",
                    ),
                ),
                (
                    "budget_spent",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=15,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Budget dépensé (FCFA)",
                    ),
                ),
                (
                    "benefit_amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Montant par bénéficiaire",
                        max_digits=12,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Montant de l'aide (FCFA)",
                    ),
                ),
                (
                    "frequency",
                    models.CharField(
                        choices=[
                            ("ONE_TIME", "Ponctuel"),
                            ("MONTHLY", "Mensuel"),
                            ("QUARTERLY", "Trimestriel"),
                            ("ANNUAL", "Annuel"),
                        ],
                        default="MONTHLY",
                        max_length=20,
                        verbose_name="Fréquence de versement",
                    ),
                ),
                (
                    "max_beneficiaries",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Laisser vide si illimité",
                        null=True,
                        verbose_name="Nombre max de bénéficiaires",
                    ),
                ),
                (
                    "current_beneficiaries",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Bénéficiaires actuels"
                    ),
                ),
                (
                    "eligibility_criteria",
                    models.JSONField(
                        default=dict,
                        help_text='\n        {\n            "vulnerability_min": 50,\n            "age_min": 18,\n            "age_max": 65,\n            "provinces": ["ESTUAIRE", "HAUT_OGOOUE"],\n            "gender": "F",\n            "household_size_min": 3\n        }\n        ',
                        verbose_name="Critères d'éligibilité",
                    ),
                ),
                (
                    "target_provinces",
                    models.JSONField(
                        default=list,
                        help_text="Liste des provinces ['ESTUAIRE', 'NGOUNIE']",
                        verbose_name="Provinces ciblées",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="programs",
                        to="programs_app.programcategory",
                        verbose_name="Catégorie",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_programs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "managed_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="managed_programs",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Géré par",
                    ),
                ),
            ],
            options={
                "verbose_name": "Programme Social",
                "verbose_name_plural": "Programmes Sociaux",
                "db_table": "social_programs",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ProgramEnrollment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "En attente"),
                            ("APPROVED", "Approuvé"),
                            ("REJECTED", "Rejeté"),
                            ("ACTIVE", "Actif"),
                            ("SUSPENDED", "Suspendu"),
                            ("COMPLETED", "Terminé"),
                        ],
                        default="PENDING",
                        max_length=20,
                        verbose_name="Statut",
                    ),
                ),
                (
                    "enrollment_date",
                    models.DateField(
                        auto_now_add=True, verbose_name="Date d'inscription"
                    ),
                ),
                (
                    "approval_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Date d'approbation"
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Date de début"
                    ),
                ),
                (
                    "end_date",
                    models.DateField(blank=True, null=True, verbose_name="Date de fin"),
                ),
                (
                    "eligibility_score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Score automatique de matching avec critères",
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Score d'éligibilité",
                    ),
                ),
                (
                    "total_received",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=12,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Total reçu (FCFA)",
                    ),
                ),
                (
                    "payments_count",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Nombre de paiements"
                    ),
                ),
                ("notes", models.TextField(blank=True, verbose_name="Notes")),
                (
                    "rejection_reason",
                    models.TextField(blank=True, verbose_name="Motif de rejet"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_enrollments",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Approuvé par",
                    ),
                ),
                (
                    "beneficiary",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="program_enrollments",
                        to="identity_app.personidentity",
                        verbose_name="Bénéficiaire",
                    ),
                ),
                (
                    "household",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="program_enrollments",
                        to="identity_app.household",
                        verbose_name="Ménage",
                    ),
                ),
                (
                    "program",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="enrollments",
                        to="programs_app.socialprogram",
                        verbose_name="Programme",
                    ),
                ),
            ],
            options={
                "verbose_name": "Inscription Programme",
                "verbose_name_plural": "Inscriptions Programmes",
                "db_table": "program_enrollments",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Payment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=12,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Montant (FCFA)",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "En attente"),
                            ("PROCESSING", "En traitement"),
                            ("COMPLETED", "Complété"),
                            ("FAILED", "Échoué"),
                            ("CANCELLED", "Annulé"),
                        ],
                        default="PENDING",
                        max_length=20,
                        verbose_name="Statut",
                    ),
                ),
                (
                    "payment_method",
                    models.CharField(
                        choices=[
                            ("MOBILE_MONEY", "Mobile Money"),
                            ("BANK_TRANSFER", "Virement bancaire"),
                            ("CASH", "Espèces"),
                            ("CHECK", "Chèque"),
                        ],
                        max_length=20,
                        verbose_name="Méthode de paiement",
                    ),
                ),
                (
                    "payment_reference",
                    models.CharField(
                        max_length=100, unique=True, verbose_name="Référence paiement"
                    ),
                ),
                (
                    "transaction_id",
                    models.CharField(
                        blank=True,
                        help_text="ID externe (operateur mobile, banque)",
                        max_length=100,
                        verbose_name="ID transaction",
                    ),
                ),
                ("scheduled_date", models.DateField(verbose_name="Date prévue")),
                (
                    "processed_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Date de traitement"
                    ),
                ),
                ("notes", models.TextField(blank=True, verbose_name="Notes")),
                (
                    "failure_reason",
                    models.TextField(blank=True, verbose_name="Motif d'échec"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "beneficiary",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payments",
                        to="identity_app.personidentity",
                        verbose_name="Bénéficiaire",
                    ),
                ),
                (
                    "processed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="processed_payments",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Traité par",
                    ),
                ),
                (
                    "enrollment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payments",
                        to="programs_app.programenrollment",
                        verbose_name="Inscription",
                    ),
                ),
                (
                    "program",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payments",
                        to="programs_app.socialprogram",
                        verbose_name="Programme",
                    ),
                ),
            ],
            options={
                "verbose_name": "Paiement",
                "verbose_name_plural": "Paiements",
                "db_table": "payments",
                "ordering": ["-scheduled_date"],
            },
        ),
        migrations.AddIndex(
            model_name="socialprogram",
            index=models.Index(
                fields=["status", "start_date"], name="social_prog_status_e7f261_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="socialprogram",
            index=models.Index(fields=["code"], name="social_prog_code_0f6c13_idx"),
        ),
        migrations.AddIndex(
            model_name="programenrollment",
            index=models.Index(
                fields=["status", "enrollment_date"],
                name="program_enr_status_a6ea4b_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="programenrollment",
            index=models.Index(
                fields=["program", "status"], name="program_enr_program_9369f1_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="programenrollment",
            unique_together={("program", "beneficiary")},
        ),
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(
                fields=["status", "scheduled_date"], name="payments_status_7bd82e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(
                fields=["payment_reference"], name="payments_payment_2311ee_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(
                fields=["beneficiary", "status"], name="payments_benefic_7d10df_idx"
            ),
        ),
    ]
