#!/usr/bin/env python
"""
🇬🇦 RSU Gabon - Génération données test Vulnérabilité
Crée des VulnerabilityAssessment réalistes pour le dashboard
"""

import os
import sys
import django
import random
from decimal import Decimal

# Configuration Django
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'rsu_identity.settings.development')
django.setup()

from apps.identity_app.models import PersonIdentity
from apps.services_app.models import VulnerabilityAssessment
from apps.programs_app.models import SocialProgram
from django.db import models
from django.utils import timezone


def generate_vulnerability_assessments():
    """Génère des évaluations de vulnérabilité pour toutes les personnes"""
    
    print("=" * 80)
    print("🇬🇦 GÉNÉRATION DONNÉES TEST - VULNERABILITY ASSESSMENTS")
    print("=" * 80)
    
    # Récupérer toutes les personnes
    persons = PersonIdentity.objects.all()
    total_persons = persons.count()
    
    if total_persons == 0:
        print("❌ Aucune personne trouvée dans la base de données!")
        print("   Exécutez d'abord le script de génération de PersonIdentity.")
        return
    
    print(f"\n📊 {total_persons} personnes trouvées")
    
    # Récupérer un programme par défaut (requis par le modèle)
    default_program = SocialProgram.objects.first()
    if not default_program:
        print("❌ Aucun programme trouvé! Création d'un programme par défaut...")
        default_program = SocialProgram.objects.create(
            code='DEFAULT',
            name='Programme par défaut',
            status='ACTIVE',
            total_budget=1000000,
            budget_spent=0
        )
        print(f"✅ Programme créé: {default_program.name}")
    
    print(f"📦 Programme utilisé: {default_program.name}")
    
    # Supprimer anciennes évaluations
    old_count = VulnerabilityAssessment.objects.count()
    if old_count > 0:
        print(f"\n🗑️  Suppression de {old_count} anciennes évaluations...")
        VulnerabilityAssessment.objects.all().delete()
    
    print("\n🔄 Génération des évaluations...")
    
    created_count = 0
    
    # Distribution réaliste des niveaux de risque
    risk_distribution = {
        'CRITICAL': 0.15,  # 15% critique
        'HIGH': 0.25,      # 25% élevé
        'MODERATE': 0.40,  # 40% modéré
        'LOW': 0.20,       # 20% faible
    }
    
    for person in persons:
        # Déterminer niveau de risque selon distribution
        rand = random.random()
        cumulative = 0
        risk_level = 'LOW'
        
        for level, probability in risk_distribution.items():
            cumulative += probability
            if rand <= cumulative:
                risk_level = level
                break
        
        # Générer scores basés sur le niveau de risque
        if risk_level == 'CRITICAL':
            base_score = random.uniform(75, 95)
        elif risk_level == 'HIGH':
            base_score = random.uniform(50, 74)
        elif risk_level == 'MODERATE':
            base_score = random.uniform(25, 49)
        else:  # LOW
            base_score = random.uniform(5, 24)
        
        # Scores par dimension (avec variation)
        household_score = max(0, min(100, base_score + random.uniform(-10, 10)))
        economic_score = max(0, min(100, base_score + random.uniform(-15, 15)))
        social_score = max(0, min(100, base_score + random.uniform(-10, 10)))
        
        # Facteurs de vulnérabilité (exemples réalistes)
        vulnerability_factors = []
        if base_score > 50:
            vulnerability_factors.extend([
                "Revenu insuffisant",
                "Accès limité aux services de santé",
                "Logement précaire"
            ])
        if base_score > 70:
            vulnerability_factors.extend([
                "Malnutrition",
                "Absence de réseau social",
                "Zone rurale isolée"
            ])
        
        risk_factors = []
        if economic_score > 60:
            risk_factors.append("Chômage")
        if household_score > 60:
            risk_factors.append("Charge familiale élevée")
        
        protective_factors = []
        if base_score < 50:
            protective_factors.extend([
                "Emploi stable",
                "Réseau familial solide",
                "Accès aux services de base"
            ])
        
        # Recommandations
        recommendations = []
        if risk_level in ['CRITICAL', 'HIGH']:
            recommendations.extend([
                "Priorité transferts monétaires d'urgence",
                "Suivi médical rapproché",
                "Programme nutrition"
            ])
        elif risk_level == 'MODERATE':
            recommendations.extend([
                "Évaluation approfondie nécessaire",
                "Formation professionnelle",
                "Appui économique"
            ])
        
        priority_interventions = []
        if risk_level == 'CRITICAL':
            priority_interventions.extend([
                "Intervention d'urgence < 48h",
                "Assistance alimentaire immédiate"
            ])
        
        # Créer l'évaluation (SANS assessed_by)
        try:
            VulnerabilityAssessment.objects.create(
                program=default_program,  # ✅ REQUIS
                person=person,
                vulnerability_score=Decimal(str(round(base_score, 2))),
                risk_level=risk_level,
                household_composition_score=Decimal(str(round(household_score, 2))),
                economic_vulnerability_score=Decimal(str(round(economic_score, 2))),
                social_vulnerability_score=Decimal(str(round(social_score, 2))),
                vulnerability_factors=vulnerability_factors,
                risk_factors=risk_factors,
                protective_factors=protective_factors,
                recommendations=recommendations,
                priority_interventions=priority_interventions,
                # assessment_date auto_now_add
                is_active=True
            )
            created_count += 1
            
            if created_count % 100 == 0:
                print(f"   ✅ {created_count}/{total_persons} évaluations créées...")
        
        except Exception as e:
            print(f"   ❌ Erreur pour personne {person.rsu_id}: {e}")
            continue
    
    print(f"\n✅ {created_count} évaluations créées avec succès!")
    
    # Statistiques finales
    print("\n📊 STATISTIQUES GÉNÉRÉES:")
    for level in ['CRITICAL', 'HIGH', 'MODERATE', 'LOW']:
        count = VulnerabilityAssessment.objects.filter(risk_level=level).count()
        percentage = (count / created_count * 100) if created_count > 0 else 0
        print(f"   {level:10s}: {count:5d} ({percentage:5.1f}%)")
    
    avg_score = VulnerabilityAssessment.objects.aggregate(
        avg=models.Avg('vulnerability_score')
    )['avg']
    
    if avg_score:
        print(f"\n📈 Score moyen global: {avg_score:.2f}")
    else:
        print(f"\n⚠️  Aucun score calculé (0 évaluations)")
    
    print("\n" + "=" * 80)
    print("✅ GÉNÉRATION TERMINÉE - Dashboard prêt à afficher les données!")
    print("=" * 80)


if __name__ == '__main__':
    generate_vulnerability_assessments()