import { getActiveTransaction } from '@sentry/core';
import { logger, uuid4 } from '@sentry/utils';
import { isHermesEnabled } from '../utils/environment';
import { PROFILE_QUEUE } from './cache';
import { startProfiling, stopProfiling } from './hermes';
import { addProfilesToEnvelope, createProfilingEvent, findProfiledTransactionsFromEnvelope } from './utils';
export const MAX_PROFILE_DURATION_MS = 30 * 1e3;
/**
 * Profiling integration creates a profile for each transaction and adds it to the event envelope.
 *
 * @experimental
 */
export class HermesProfiling {
    constructor() {
        /**
         * @inheritDoc
         */
        this.name = HermesProfiling.id;
        this._startCurrentProfileForActiveTransaction = () => {
            if (this._currentProfile) {
                return;
            }
            const transaction = this._getCurrentHub && getActiveTransaction(this._getCurrentHub());
            transaction && this._startCurrentProfile(transaction);
        };
        this._startCurrentProfile = (transaction) => {
            this._finishCurrentProfile();
            const shouldStartProfiling = this._shouldStartProfiling(transaction);
            if (!shouldStartProfiling) {
                return;
            }
            this._currentProfileTimeout = setTimeout(this._finishCurrentProfile, MAX_PROFILE_DURATION_MS);
            this._startNewProfile(transaction);
        };
        this._shouldStartProfiling = (transaction) => {
            if (!transaction.sampled) {
                logger.log('[Profiling] Transaction is not sampled, skipping profiling');
                return false;
            }
            const client = this._getCurrentHub && this._getCurrentHub().getClient();
            const options = client && client.getOptions();
            const profilesSampleRate = options && options._experiments && typeof options._experiments.profilesSampleRate === 'number'
                ? options._experiments.profilesSampleRate
                : undefined;
            if (profilesSampleRate === undefined) {
                logger.log('[Profiling] Profiling disabled, enable it by setting `profilesSampleRate` option to SDK init call.');
                return false;
            }
            // Check if we should sample this profile
            if (Math.random() > profilesSampleRate) {
                logger.log('[Profiling] Skip profiling transaction due to sampling.');
                return false;
            }
            return true;
        };
        /**
         * Starts a new profile and links it to the transaction.
         */
        this._startNewProfile = (transaction) => {
            const profileStartTimestampNs = startProfiling();
            if (!profileStartTimestampNs) {
                return;
            }
            this._currentProfile = {
                profile_id: uuid4(),
                startTimestampNs: profileStartTimestampNs,
            };
            transaction.setContext('profile', { profile_id: this._currentProfile.profile_id });
            // @ts-expect-error profile_id is not part of the metadata type
            transaction.setMetadata({ profile_id: this._currentProfile.profile_id });
            logger.log('[Profiling] started profiling: ', this._currentProfile.profile_id);
        };
        /**
         * Stops profiling and adds the profile to the queue to be processed on beforeEnvelope.
         */
        this._finishCurrentProfile = () => {
            this._clearCurrentProfileTimeout();
            if (this._currentProfile === undefined) {
                return;
            }
            const profile = stopProfiling();
            if (!profile) {
                logger.warn('[Profiling] Stop failed. Cleaning up...');
                this._currentProfile = undefined;
                return;
            }
            profile.profile_id = this._currentProfile.profile_id;
            PROFILE_QUEUE.add(profile.profile_id, profile);
            logger.log('[Profiling] finished profiling: ', this._currentProfile.profile_id);
            this._currentProfile = undefined;
        };
        this._createProfileEventFor = (profiledTransaction) => {
            var _a, _b, _c;
            const profile_id = (_b = (_a = profiledTransaction === null || profiledTransaction === void 0 ? void 0 : profiledTransaction.contexts) === null || _a === void 0 ? void 0 : _a['profile']) === null || _b === void 0 ? void 0 : _b['profile_id'];
            if (typeof profile_id !== 'string') {
                logger.log('[Profiling] cannot find profile for a transaction without a profile context');
                return null;
            }
            // Remove the profile from the transaction context before sending, relay will take care of the rest.
            if ((_c = profiledTransaction === null || profiledTransaction === void 0 ? void 0 : profiledTransaction.contexts) === null || _c === void 0 ? void 0 : _c['.profile']) {
                delete profiledTransaction.contexts.profile;
            }
            const cpuProfile = PROFILE_QUEUE.get(profile_id);
            PROFILE_QUEUE.delete(profile_id);
            if (!cpuProfile) {
                logger.log(`[Profiling] cannot find profile ${profile_id} for transaction ${profiledTransaction.event_id}`);
                return null;
            }
            const profile = createProfilingEvent(cpuProfile, profiledTransaction);
            logger.log(`[Profiling] Created profile ${profile_id} for transaction ${profiledTransaction.event_id}`);
            return profile;
        };
        this._clearCurrentProfileTimeout = () => {
            this._currentProfileTimeout !== undefined && clearTimeout(this._currentProfileTimeout);
            this._currentProfileTimeout = undefined;
        };
    }
    /**
     * @inheritDoc
     */
    setupOnce(_, getCurrentHub) {
        if (!isHermesEnabled()) {
            logger.log('[Profiling] Hermes is not enabled, not adding profiling integration.');
            return;
        }
        this._getCurrentHub = getCurrentHub;
        const client = getCurrentHub().getClient();
        if (!client || typeof client.on !== 'function') {
            return;
        }
        this._startCurrentProfileForActiveTransaction();
        client.on('startTransaction', this._startCurrentProfile);
        client.on('finishTransaction', this._finishCurrentProfile);
        client.on('beforeEnvelope', (envelope) => {
            if (!PROFILE_QUEUE.size()) {
                return;
            }
            const profiledTransactions = findProfiledTransactionsFromEnvelope(envelope);
            if (!profiledTransactions.length) {
                logger.log('[Profiling] no profiled transactions found in envelope');
                return;
            }
            const profilesToAddToEnvelope = [];
            for (const profiledTransaction of profiledTransactions) {
                const profile = this._createProfileEventFor(profiledTransaction);
                if (profile) {
                    profilesToAddToEnvelope.push(profile);
                }
            }
            addProfilesToEnvelope(envelope, profilesToAddToEnvelope);
        });
    }
}
/**
 * @inheritDoc
 */
HermesProfiling.id = 'HermesProfiling';
//# sourceMappingURL=integration.js.map