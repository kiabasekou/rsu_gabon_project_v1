import { forEachEnvelopeItem, logger } from '@sentry/utils';
const ACTIVE_THREAD_ID_STRING = '0';
/**
 *
 */
export function isValidProfile(profile) {
    if (profile.samples.length <= 1) {
        if (__DEV__) {
            // Log a warning if the profile has less than 2 samples so users can know why
            // they are not seeing any profiling data and we cant avoid the back and forth
            // of asking them to provide us with a dump of the profile data.
            logger.log('[Profiling] Discarding profile because it contains less than 2 samples');
        }
        return false;
    }
    if (!profile.profile_id) {
        return false;
    }
    return true;
}
/**
 * Finds transactions with profile_id context in the envelope
 * @param envelope
 * @returns
 */
export function findProfiledTransactionsFromEnvelope(envelope) {
    const events = [];
    forEachEnvelopeItem(envelope, (item, type) => {
        if (type !== 'transaction') {
            return;
        }
        // First item is the type
        for (let j = 1; j < item.length; j++) {
            const event = item[j];
            // @ts-expect-error accessing private property
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
            if (event && event.contexts && event.contexts['profile'] && event.contexts['profile']['profile_id']) {
                events.push(item[j]);
            }
        }
    });
    return events;
}
/**
 * Creates a profiling envelope item, if the profile does not pass validation, returns null.
 * @param event
 * @returns {Profile | null}
 */
export function createProfilingEvent(profile, event) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
    if (!isValidProfile(profile)) {
        return null;
    }
    return createProfilePayload(profile, {
        release: event.release || '',
        environment: event.environment || '',
        event_id: event.event_id || '',
        transaction: event.transaction || '',
        start_timestamp: event.start_timestamp ? event.start_timestamp * 1000 : Date.now(),
        trace_id: (_c = (_b = (_a = event === null || event === void 0 ? void 0 : event.contexts) === null || _a === void 0 ? void 0 : _a.trace) === null || _b === void 0 ? void 0 : _b.trace_id) !== null && _c !== void 0 ? _c : '',
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        profile_id: profile.profile_id,
        os_platform: ((_e = (_d = event.contexts) === null || _d === void 0 ? void 0 : _d.os) === null || _e === void 0 ? void 0 : _e.name) || '',
        os_version: ((_g = (_f = event.contexts) === null || _f === void 0 ? void 0 : _f.os) === null || _g === void 0 ? void 0 : _g.version) || '',
        os_build: ((_j = (_h = event.contexts) === null || _h === void 0 ? void 0 : _h.os) === null || _j === void 0 ? void 0 : _j.build) || '',
        device_locale: ((_l = (_k = event.contexts) === null || _k === void 0 ? void 0 : _k.device) === null || _l === void 0 ? void 0 : _l.locale) || '',
        device_model: ((_o = (_m = event.contexts) === null || _m === void 0 ? void 0 : _m.device) === null || _o === void 0 ? void 0 : _o.model) || '',
        device_manufacturer: ((_q = (_p = event.contexts) === null || _p === void 0 ? void 0 : _p.device) === null || _q === void 0 ? void 0 : _q.manufacturer) || '',
        device_architecture: ((_s = (_r = event.contexts) === null || _r === void 0 ? void 0 : _r.device) === null || _s === void 0 ? void 0 : _s.arch) || '',
        device_is_emulator: ((_u = (_t = event.contexts) === null || _t === void 0 ? void 0 : _t.device) === null || _u === void 0 ? void 0 : _u.simulator) || false,
    });
}
/**
 * Create a profile
 * @param profile
 * @param options
 * @returns
 */
function createProfilePayload(cpuProfile, { release, environment, event_id, transaction, start_timestamp, trace_id, profile_id, os_platform, os_version, os_build, device_locale, device_model, device_manufacturer, device_architecture, device_is_emulator, }) {
    // Log a warning if the profile has an invalid traceId (should be uuidv4).
    // All profiles and transactions are rejected if this is the case and we want to
    // warn users that this is happening if they enable debug flag
    if (trace_id && trace_id.length !== 32) {
        if (__DEV__) {
            logger.log(`[Profiling] Invalid traceId: ${trace_id} on profiled event`);
        }
    }
    const profile = {
        event_id: profile_id,
        timestamp: new Date(start_timestamp).toISOString(),
        platform: 'node',
        version: '1',
        release: release,
        environment: environment,
        runtime: {
            name: 'hermes',
            version: '', // TODO: get hermes version
        },
        os: {
            name: os_platform,
            version: os_version,
            build_number: os_build,
        },
        device: {
            locale: device_locale,
            model: device_model,
            manufacturer: device_manufacturer,
            architecture: device_architecture,
            is_emulator: device_is_emulator,
        },
        profile: cpuProfile,
        transaction: {
            name: transaction,
            id: event_id,
            trace_id: trace_id || '',
            active_thread_id: ACTIVE_THREAD_ID_STRING,
        },
    };
    return profile;
}
/**
 * Adds items to envelope if they are not already present - mutates the envelope.
 * @param envelope
 */
export function addProfilesToEnvelope(envelope, profiles) {
    if (!profiles.length) {
        return envelope;
    }
    for (const profile of profiles) {
        // @ts-expect-error untyped envelope
        envelope[1].push([{ type: 'profile' }, profile]);
    }
    return envelope;
}
//# sourceMappingURL=utils.js.map