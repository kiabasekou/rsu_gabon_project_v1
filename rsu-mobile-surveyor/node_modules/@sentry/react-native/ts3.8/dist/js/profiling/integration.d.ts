import type { Hub } from '@sentry/core';
import type { EventProcessor, Integration } from '@sentry/types';
export declare const MAX_PROFILE_DURATION_MS: number;
/**
 * Profiling integration creates a profile for each transaction and adds it to the event envelope.
 *
 * @experimental
 */
export declare class HermesProfiling implements Integration {
    /**
     * @inheritDoc
     */
    static id: string;
    /**
     * @inheritDoc
     */
    name: string;
    private _getCurrentHub?;
    private _currentProfile;
    private _currentProfileTimeout;
    /**
     * @inheritDoc
     */
    setupOnce(_: (e: EventProcessor) => void, getCurrentHub: () => Hub): void;
    private _startCurrentProfileForActiveTransaction;
    private _startCurrentProfile;
    private _shouldStartProfiling;
    /**
     * Starts a new profile and links it to the transaction.
     */
    private _startNewProfile;
    /**
     * Stops profiling and adds the profile to the queue to be processed on beforeEnvelope.
     */
    private _finishCurrentProfile;
    private _createProfileEventFor;
    private _clearCurrentProfileTimeout;
}
//# sourceMappingURL=integration.d.ts.map
