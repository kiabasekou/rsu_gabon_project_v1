// =============================================================================
// A. VULNERABILITY SCORE CARD (components/cards/VulnerabilityScoreCard.jsx)
// =============================================================================
import React from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
} from 'react-native';
import {
  Card,
  Title,
  Paragraph,
  ProgressBar,
  Avatar,
  Chip,
} from 'react-native-paper';
import Icon from 'react-native-vector-icons/MaterialIcons';
import { format } from 'date-fns';
import { fr } from 'date-fns/locale';


export const VulnerabilityScoreCard = ({
  score,
  level,
  dimensions = {},
  factors = [],
  onPress,
  compact = false,
}) => {
  const getScoreColor = (score) => {
    if (score >= 75) return '#F44336';
    if (score >= 50) return '#FF9800';
    if (score >= 25) return '#4CAF50';
    return '#9C27B0';
  };

  const getLevelIcon = (level) => {
    switch (level) {
      case 'CRITICAL': return 'warning';
      case 'HIGH': return 'error-outline';
      case 'MODERATE': return 'info-outline';
      case 'LOW': return 'check-circle-outline';
      default: return 'help-outline';
    }
  };

  const getLevelLabel = (level) => {
    switch (level) {
      case 'CRITICAL': return 'Critique';
      case 'HIGH': return 'Élevée';
      case 'MODERATE': return 'Modérée';
      case 'LOW': return 'Faible';
      default: return 'Indéterminé';
    }
  };

  return (
    <Card style={styles.card} onPress={onPress}>
      <Card.Content>
        <View style={styles.header}>
          <View style={styles.scoreSection}>
            <Avatar.Icon
              size={compact ? 50 : 70}
              icon={getLevelIcon(level)}
              style={[styles.scoreIcon, { backgroundColor: getScoreColor(score) }]}
            />
            <View style={styles.scoreInfo}>
              <Title style={[styles.scoreValue, compact && styles.compactScore]}>
                {Math.round(score)}/100
              </Title>
              <Paragraph style={styles.levelLabel}>
                {getLevelLabel(level)}
              </Paragraph>
            </View>
          </View>
          <Chip
            mode="outlined"
            style={[
              styles.levelChip,
              { backgroundColor: `${getScoreColor(score)}20` }
            ]}
          >
            {getLevelLabel(level)}
          </Chip>
        </View>

        {!compact && (
          <>
            <ProgressBar
              progress={score / 100}
              style={styles.progressBar}
              color={getScoreColor(score)}
            />

            {Object.keys(dimensions).length > 0 && (
              <View style={styles.dimensions}>
                <Paragraph style={styles.dimensionsTitle}>
                  Détail par dimension:
                </Paragraph>
                {Object.entries(dimensions).map(([key, value]) => (
                  <View key={key} style={styles.dimensionRow}>
                    <Paragraph style={styles.dimensionLabel}>{key}</Paragraph>
                    <View style={styles.dimensionScore}>
                      <ProgressBar
                        progress={value / 100}
                        style={styles.dimensionBar}
                        color={getScoreColor(value)}
                      />
                      <Paragraph style={styles.dimensionValue}>
                        {Math.round(value)}
                      </Paragraph>
                    </View>
                  </View>
                ))}
              </View>
            )}

            {factors.length > 0 && (
              <View style={styles.factors}>
                <Paragraph style={styles.factorsTitle}>
                  Facteurs identifiés:
                </Paragraph>
                <View style={styles.factorsList}>
                  {factors.slice(0, 4).map((factor, index) => (
                    <Chip
                      key={index}
                      mode="outlined"
                      style={styles.factorChip}
                    >
                      {factor}
                    </Chip>
                  ))}
                  {factors.length > 4 && (
                    <Chip mode="outlined" style={styles.factorChip}>
                      +{factors.length - 4}
                    </Chip>
                  )}
                </View>
              </View>
            )}
          </>
        )}
      </Card.Content>
    </Card>
  );
};

const styles = StyleSheet.create({
  card: {
    elevation: 2,
    marginVertical: 8,
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 16,
  },
  scoreSection: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  scoreIcon: {
    marginRight: 16,
  },
  scoreInfo: {
    flex: 1,
  },
  scoreValue: {
    fontSize: 28,
    fontWeight: 'bold',
    marginBottom: 4,
  },
  compactScore: {
    fontSize: 20,
  },
  levelLabel: {
    color: '#666',
    fontSize: 16,
  },
  levelChip: {
    alignSelf: 'flex-start',
  },
  progressBar: {
    height: 8,
    borderRadius: 4,
    marginBottom: 16,
  },
  dimensions: {
    marginBottom: 16,
  },
  dimensionsTitle: {
    fontSize: 14,
    fontWeight: 'bold',
    marginBottom: 8,
    color: '#333',
  },
  dimensionRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  dimensionLabel: {
    fontSize: 12,
    width: 80,
    color: '#666',
  },
  dimensionScore: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    marginLeft: 8,
  },
  dimensionBar: {
    flex: 1,
    height: 4,
    borderRadius: 2,
    marginRight: 8,
  },
  dimensionValue: {
    fontSize: 12,
    fontWeight: 'bold',
    width: 30,
    textAlign: 'right',
  },
  factors: {
    marginTop: 8,
  },
  factorsTitle: {
    fontSize: 14,
    fontWeight: 'bold',
    marginBottom: 8,
    color: '#333',
  },
  factorsList: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 4,
  },
  factorChip: {
    marginBottom: 4,
  },
});
